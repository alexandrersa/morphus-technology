from django.test import TestCase
from vulnerability.models import Vulnerability


class VulnerabilityModelTest(TestCase):
    """."""

    @classmethod
    def setUpTestData(cls):
        """Test vulnarebility creation."""
        Vulnerability.objects.create(
                                    hostname='MyHostname',
                                    ip_address='10.0.0.1',
                                    title="Alexandre PC",
                                    severity="Low",
                                    cvss="6.0",
                                    publication_date="2020-05-02",
                                    status=True,
                                    )

    def test_hostname_inserted(self):
        """Test if hostname has created with sucess."""
        host_data = Vulnerability.objects.get(id=1)
        host = host_data._meta.get_field('hostname').verbose_name
        self.assertEquals(host, 'hostname')

    def test_ip_address_inserted(self):
        """Test if ip address has created with sucess."""
        host_data = Vulnerability.objects.get(id=1)
        host = host_data._meta.get_field('ip_address').verbose_name
        self.assertEquals(host, 'ip_address')

    def test_title_address_inserted(self):
        """Test if title has created with sucess."""
        host_data = Vulnerability.objects.get(id=1)
        host = host_data._meta.get_field('title').verbose_name
        self.assertEquals(host, 'title')

    def test_severity_inserted(self):
        """Test if severity has created with sucess."""
        host_data = Vulnerability.objects.get(id=1)
        host = host_data._meta.get_field('severity').verbose_name
        self.assertEquals(host, 'severity')

    def test_cvss_inserted(self):
        """Test if cvss has created with sucess."""
        host_data = Vulnerability.objects.get(id=1)
        host = host_data._meta.get_field('cvss').verbose_name
        self.assertEquals(host, 'cvss')

    def test_cvss_is_float(self):
        """Test if cvss has float type."""
        host_data = Vulnerability.objects.get(id=1)
        host = host_data._meta.get_field('cvss').verbose_name
        isinstance(host, float)

    def test_publication_date_inserted(self):
        """Test if publication date has created with sucess."""
        host_data = Vulnerability.objects.get(id=1)
        host = host_data._meta.get_field('publication_date').verbose_name
        self.assertEquals(host, 'publication_date')

    def test_publication_date_is_future(self):
        """Test if publication_date is future."""
        from datetime import datetime, timedelta
        host_data = Vulnerability.objects.get(id=1)
        host = host_data._meta.get_field('publication_date').verbose_name

        today = datetime.strptime(host, '%Y-%m-%d').date()
        event1 = today
        event1.end_date = today - timedelta(days=1)  # 1 day ago
        event2 = today
        event2.end_date = today + timedelta(days=1)  # 1 day in future
        self.assertTrue(event1.is_over())
        self.assertFalse(event2.is_over())

    def test_status_inserted(self):
        """Test if status has created with sucess."""
        host_data = Vulnerability.objects.get(id=1)
        host = host_data._meta.get_field('status').verbose_name
        self.assertEquals(host, 'status')

    def test_status_is_boolean(self):
        """Test if status is boolean type."""
        host_data = Vulnerability.objects.get(id=1)
        host = host_data._meta.get_field('status').verbose_name
        isinstance(host, bool)
