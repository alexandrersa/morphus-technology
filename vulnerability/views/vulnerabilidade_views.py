"""Vulnerability views."""
from django.db.models import Count, Q
from vulnerability.models import Vulnerability
from vulnerability.serializers import VulnerabilitySerializer
from rest_framework import generics
from rest_framework.response import Response
from rest_framework.filters import SearchFilter
from django_filters.rest_framework import DjangoFilterBackend


class VulnerabilitiesViewSet(generics.ListAPIView):
    """API endpoint that allows view vulnerability info."""

    queryset = Vulnerability.objects.all()
    serializer_class = VulnerabilitySerializer
    filter_backends = [DjangoFilterBackend, SearchFilter]
    filterset_fields = ['hostname', 'severity']
    search_fields = ['hostname', 'severity']

    def get(self, request):
        """Do filter in vulnerabilities list."""
        list_hosts = []
        hosts = Vulnerability.objects.values(
                                             'title',
                                             'severity',
                                             'cvss',
                                             'publication_date'
                                            )
        hosts = hosts.annotate(hosts_infectados=Count('hostname'))
        hosts = hosts.order_by('title')

        for host in hosts:
            context = {
                        "title": host.get('title'),
                        "severity": host.get('severity'),
                        "cvss": host.get('cvss'),
                        "publication_date": host.get('publication_date'),
                        "hosts_infectados": host.get('hosts_infectados')
                      }
            list_hosts.append(context)
        page = self.paginate_queryset(hosts)
        if page is not None:
            return self.get_paginated_response(list_hosts)
        return Response(data=list_hosts)


class VulnerabilityViewSet(generics.ListAPIView):
    """Return vulnerability detail."""

    queryset = Vulnerability.objects.all()
    serializer_class = VulnerabilitySerializer
    filter_backends = [DjangoFilterBackend, SearchFilter]
    filterset_fields = ['hostname', 'severity', 'id']
    search_fields = ['hostname', 'severity', 'id']

    def get_queryset(self):
        """Return host details based in query string."""
        queryset = Vulnerability.objects.all()
        query = self.request.query_params.get('search', None)
        if query:
            queryset = queryset.filter(
                                        Q(severity__icontains=query) |
                                        (Q(hostname=query) & Q(status=False))
                                      )
        return queryset
