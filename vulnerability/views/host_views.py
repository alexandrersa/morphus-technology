"""Vulnerability views."""
from django.db.models import Max, Count, Q
from vulnerability.models import Vulnerability
from vulnerability.serializers import VulnerabilitySerializer
from rest_framework import generics
from rest_framework.response import Response
from rest_framework.filters import SearchFilter
from django_filters.rest_framework import DjangoFilterBackend


class HostsViewSet(generics.ListAPIView):
    """API endpoint that allows view hosts info."""

    queryset = Vulnerability.objects.all()
    serializer_class = VulnerabilitySerializer
    filter_backends = [DjangoFilterBackend, SearchFilter]
    filterset_fields = ['hostname', 'status']
    search_fields = ['title']

    def get(self, request):
        """Do filter in host list."""
        list_hosts = []
        hosts = Vulnerability.objects.values('hostname', 'ip_address')
        hosts = hosts.filter(status=False)
        hosts = hosts.annotate(
                                vulnerabilidades=Count('hostname'),
                                risco=Max('cvss')
                              )
        hosts = hosts.order_by('hostname')

        for host in hosts:
            context = {
                        "host": host.get('hostname'),
                        "ip_address": host.get('ip_address'),
                        "vulnerabilidades": host.get('vulnerabilidades'),
                        "risco": host.get('risco')
                      }
            list_hosts.append(context)
        page = self.paginate_queryset(hosts)
        if page is not None:
            return self.get_paginated_response(list_hosts)
        return Response(data=list_hosts)


class HostViewSet(generics.ListAPIView):
    """Return host detail."""

    queryset = Vulnerability.objects.all()
    serializer_class = VulnerabilitySerializer
    filter_backends = [DjangoFilterBackend, SearchFilter]
    filterset_fields = ['hostname']
    search_fields = ['hostname', 'title']

    def get_queryset(self):
        """Return host details based in query string."""
        queryset = Vulnerability.objects.all()
        title = self.request.query_params.get('search', None)
        if title:
            queryset = queryset.filter(
                                        Q(title__icontains=title) &
                                        Q(status=False)
                                      )
        return queryset
