"""Vulnerability views."""
from django.db.models import Avg, Count, Max
from vulnerability.models import Vulnerability
from vulnerability.serializers import VulnerabilitySerializer
from rest_framework import generics
from rest_framework.response import Response


class DashboardTotalHostsViewSet(generics.ListAPIView):
    """API endpoint when return total hosts and total vulnerable hosts."""

    queryset = Vulnerability.objects.all()
    serializer_class = VulnerabilitySerializer

    def get(self, request):
        """Return total hosts and total vulnerable hosts."""
        hosts = Vulnerability.objects.values("id")

        total_hosts = hosts.count()
        hosts_vulneraveis = hosts.filter(status=False).count()

        context = {
                    "total_hosts": total_hosts,
                    "hosts_vulneraveis": hosts_vulneraveis
                  }

        return Response(data=context)


class DashboardNotCorrectedViewSet(generics.ListAPIView):
    """Return total vulnerabilities and total vulnerabilities not corrected."""

    queryset = Vulnerability.objects.all()
    serializer_class = VulnerabilitySerializer

    def get(self, request):
        """Total vulnerabilities and total vulnerabilities not corrected."""
        hosts = Vulnerability.objects.values("title")
        total_vulnerabilidades = hosts.count()

        total_nao_corrigidas = hosts.filter(status=False).count()

        context = {
                    "total_vulnerabilidades": total_vulnerabilidades,
                    "total_nao_corrigidas": total_nao_corrigidas
                  }

        return Response(data=context)


class DashboardMedRiskViewSet(generics.ListAPIView):
    """Return medium of risk."""

    queryset = Vulnerability.objects.all()
    serializer_class = VulnerabilitySerializer

    def get(self, request):
        """Return medium of risk."""
        risco = 0.0
        hosts = Vulnerability.objects.values('severity')
        hosts = hosts.filter(status=False)
        hosts = hosts.annotate(
                                vulnerabilidades=Count('severity'),
                                risk_avg=Avg('cvss')
                              )

        for host in hosts:
            if host.get('risk_avg'):
                risco = risco + host.get('risk_avg')

        context = {"risk_avg": risco / host.get('vulnerabilidades')}

        return Response(data=context)


class DashboardNotCorrectedViewSet(generics.ListAPIView):
    """Return vulnerabilites nor corrected by severity."""

    queryset = Vulnerability.objects.all()
    serializer_class = VulnerabilitySerializer

    def get(self, request):
        """Graph distribution no corrected by severity."""
        list_hosts = []
        hosts = Vulnerability.objects.filter(status=False).values('severity')
        hosts = hosts.filter(status=False)
        hosts = hosts.annotate(
                               vulnerabilidades=Count('severity')
                             )
        hosts = hosts.order_by('severity')

        for host in hosts:
            context = {
                         host.get('severity'): host.get('vulnerabilidades')
                      }
            list_hosts.append(context)
        return Response(data=hosts)


class DashboardTopTenViewSet(generics.ListAPIView):
    """Top ten vulnerability in host."""

    queryset = Vulnerability.objects.all()
    serializer_class = VulnerabilitySerializer

    def get(self, request):
        """Top ten vulnerability in host."""
        list_hosts = []
        hosts = Vulnerability.objects.values('hostname')
        hosts = hosts.filter(status=False)
        hosts = hosts.annotate(
                                vulnerabilidades=Count('hostname')
                              )
        hosts = hosts.order_by('-vulnerabilidades')[:10]

        for host in hosts:
            context = {
                        "host": host.get('hostname'),
                        "vulnerabilidades": host.get('vulnerabilidades'),
                      }
            list_hosts.append(context)
        return Response(data=list_hosts)
